{"ast":null,"code":"//  Simple cookie handling implementation based on the standard RFC 6265.\n//\n//  This module just has two functionalities:\n//    - Parse a set-cookie-header as a key value object\n//    - Write a cookie-string from a key value object\n//\n//  All cookie attributes are ignored.\nvar unescape = require('querystring').unescape;\n\nvar COOKIE_PAIR = /^([^=\\s]+)\\s*=\\s*(\"?)\\s*(.*)\\s*\\2\\s*$/;\nvar EXCLUDED_CHARS = /[\\x00-\\x1F\\x7F\\x3B\\x3B\\s\\\"\\,\\\\\"%]/g;\nvar TRAILING_SEMICOLON = /\\x3B+$/;\nvar SEP_SEMICOLON = /\\s*\\x3B\\s*/; // i know these should be 'const', but I'd like to keep\n// supporting earlier node.js versions as long as I can. :)\n\nvar KEY_INDEX = 1; // index of key from COOKIE_PAIR match\n\nvar VALUE_INDEX = 3; // index of value from COOKIE_PAIR match\n// Returns a copy str trimmed and without trainling semicolon.\n\nfunction cleanCookieString(str) {\n  return str.trim().replace(/\\x3B+$/, '');\n}\n\nfunction getFirstPair(str) {\n  var index = str.indexOf('\\x3B');\n  return index === -1 ? str : str.substr(0, index);\n} // Returns a encoded copy of str based on RFC6265 S4.1.1.\n\n\nfunction encodeCookieComponent(str) {\n  return str.toString().replace(EXCLUDED_CHARS, encodeURIComponent);\n} // Parses a set-cookie-string based on the standard defined in RFC6265 S4.1.1.\n\n\nfunction parseSetCookieString(str) {\n  str = cleanCookieString(str);\n  str = getFirstPair(str);\n  var res = COOKIE_PAIR.exec(str);\n  if (!res || !res[VALUE_INDEX]) return null;\n  return {\n    name: unescape(res[KEY_INDEX]),\n    value: unescape(res[VALUE_INDEX])\n  };\n} // Parses a set-cookie-header and returns a key/value object.\n// Each key represents the name of a cookie.\n\n\nfunction parseSetCookieHeader(header) {\n  if (!header) return {};\n  header = Array.isArray(header) ? header : [header];\n  return header.reduce(function (res, str) {\n    var cookie = parseSetCookieString(str);\n    if (cookie) res[cookie.name] = cookie.value;\n    return res;\n  }, {});\n} // Writes a set-cookie-string based on the standard definded in RFC6265 S4.1.1.\n\n\nfunction writeCookieString(obj) {\n  return Object.keys(obj).reduce(function (str, name) {\n    var encodedName = encodeCookieComponent(name);\n    var encodedValue = encodeCookieComponent(obj[name]);\n    str += (str ? '; ' : '') + encodedName + '=' + encodedValue;\n    return str;\n  }, '');\n} // returns a key/val object from an array of cookie strings\n\n\nexports.read = parseSetCookieHeader; // writes a cookie string header\n\nexports.write = writeCookieString;","map":{"version":3,"names":["unescape","require","COOKIE_PAIR","EXCLUDED_CHARS","TRAILING_SEMICOLON","SEP_SEMICOLON","KEY_INDEX","VALUE_INDEX","cleanCookieString","str","trim","replace","getFirstPair","index","indexOf","substr","encodeCookieComponent","toString","encodeURIComponent","parseSetCookieString","res","exec","name","value","parseSetCookieHeader","header","Array","isArray","reduce","cookie","writeCookieString","obj","Object","keys","encodedName","encodedValue","exports","read","write"],"sources":["/mnt/c/users/46721/documents/iths/ITHS-Dashboard/node_modules/needle/lib/cookies.js"],"sourcesContent":["\n//  Simple cookie handling implementation based on the standard RFC 6265.\n//\n//  This module just has two functionalities:\n//    - Parse a set-cookie-header as a key value object\n//    - Write a cookie-string from a key value object\n//\n//  All cookie attributes are ignored.\n\nvar unescape = require('querystring').unescape;\n\nvar COOKIE_PAIR        = /^([^=\\s]+)\\s*=\\s*(\"?)\\s*(.*)\\s*\\2\\s*$/;\nvar EXCLUDED_CHARS     = /[\\x00-\\x1F\\x7F\\x3B\\x3B\\s\\\"\\,\\\\\"%]/g;\nvar TRAILING_SEMICOLON = /\\x3B+$/;\nvar SEP_SEMICOLON      = /\\s*\\x3B\\s*/;\n\n// i know these should be 'const', but I'd like to keep\n// supporting earlier node.js versions as long as I can. :)\n\nvar KEY_INDEX   = 1; // index of key from COOKIE_PAIR match\nvar VALUE_INDEX = 3; // index of value from COOKIE_PAIR match\n\n// Returns a copy str trimmed and without trainling semicolon.\nfunction cleanCookieString(str) {\n  return str.trim().replace(/\\x3B+$/, '');\n}\n\nfunction getFirstPair(str) {\n  var index = str.indexOf('\\x3B');\n  return index === -1 ? str : str.substr(0, index);\n}\n\n// Returns a encoded copy of str based on RFC6265 S4.1.1.\nfunction encodeCookieComponent(str) {\n  return str.toString().replace(EXCLUDED_CHARS, encodeURIComponent);\n}\n\n// Parses a set-cookie-string based on the standard defined in RFC6265 S4.1.1.\nfunction parseSetCookieString(str) {\n  str = cleanCookieString(str);\n  str = getFirstPair(str);\n\n  var res = COOKIE_PAIR.exec(str);\n  if (!res || !res[VALUE_INDEX]) return null;\n\n  return {\n    name  : unescape(res[KEY_INDEX]),\n    value : unescape(res[VALUE_INDEX])\n  };\n}\n\n// Parses a set-cookie-header and returns a key/value object.\n// Each key represents the name of a cookie.\nfunction parseSetCookieHeader(header) {\n  if (!header) return {};\n  header = Array.isArray(header) ? header : [header];\n\n  return header.reduce(function(res, str) {\n    var cookie = parseSetCookieString(str);\n    if (cookie) res[cookie.name] = cookie.value;\n    return res;\n  }, {});\n}\n\n// Writes a set-cookie-string based on the standard definded in RFC6265 S4.1.1.\nfunction writeCookieString(obj) {\n  return Object.keys(obj).reduce(function(str, name) {\n    var encodedName  = encodeCookieComponent(name);\n    var encodedValue = encodeCookieComponent(obj[name]);\n    str += (str ? '; ' : '') + encodedName + '=' + encodedValue;\n    return str;\n  }, '');\n}\n\n// returns a key/val object from an array of cookie strings\nexports.read = parseSetCookieHeader;\n\n// writes a cookie string header\nexports.write = writeCookieString;\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,QAAtC;;AAEA,IAAIE,WAAW,GAAU,uCAAzB;AACA,IAAIC,cAAc,GAAO,oCAAzB;AACA,IAAIC,kBAAkB,GAAG,QAAzB;AACA,IAAIC,aAAa,GAAQ,YAAzB,C,CAEA;AACA;;AAEA,IAAIC,SAAS,GAAK,CAAlB,C,CAAqB;;AACrB,IAAIC,WAAW,GAAG,CAAlB,C,CAAqB;AAErB;;AACA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;EAC9B,OAAOA,GAAG,CAACC,IAAJ,GAAWC,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,CAAP;AACD;;AAED,SAASC,YAAT,CAAsBH,GAAtB,EAA2B;EACzB,IAAII,KAAK,GAAGJ,GAAG,CAACK,OAAJ,CAAY,MAAZ,CAAZ;EACA,OAAOD,KAAK,KAAK,CAAC,CAAX,GAAeJ,GAAf,GAAqBA,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAcF,KAAd,CAA5B;AACD,C,CAED;;;AACA,SAASG,qBAAT,CAA+BP,GAA/B,EAAoC;EAClC,OAAOA,GAAG,CAACQ,QAAJ,GAAeN,OAAf,CAAuBR,cAAvB,EAAuCe,kBAAvC,CAAP;AACD,C,CAED;;;AACA,SAASC,oBAAT,CAA8BV,GAA9B,EAAmC;EACjCA,GAAG,GAAGD,iBAAiB,CAACC,GAAD,CAAvB;EACAA,GAAG,GAAGG,YAAY,CAACH,GAAD,CAAlB;EAEA,IAAIW,GAAG,GAAGlB,WAAW,CAACmB,IAAZ,CAAiBZ,GAAjB,CAAV;EACA,IAAI,CAACW,GAAD,IAAQ,CAACA,GAAG,CAACb,WAAD,CAAhB,EAA+B,OAAO,IAAP;EAE/B,OAAO;IACLe,IAAI,EAAItB,QAAQ,CAACoB,GAAG,CAACd,SAAD,CAAJ,CADX;IAELiB,KAAK,EAAGvB,QAAQ,CAACoB,GAAG,CAACb,WAAD,CAAJ;EAFX,CAAP;AAID,C,CAED;AACA;;;AACA,SAASiB,oBAAT,CAA8BC,MAA9B,EAAsC;EACpC,IAAI,CAACA,MAAL,EAAa,OAAO,EAAP;EACbA,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA1C;EAEA,OAAOA,MAAM,CAACG,MAAP,CAAc,UAASR,GAAT,EAAcX,GAAd,EAAmB;IACtC,IAAIoB,MAAM,GAAGV,oBAAoB,CAACV,GAAD,CAAjC;IACA,IAAIoB,MAAJ,EAAYT,GAAG,CAACS,MAAM,CAACP,IAAR,CAAH,GAAmBO,MAAM,CAACN,KAA1B;IACZ,OAAOH,GAAP;EACD,CAJM,EAIJ,EAJI,CAAP;AAKD,C,CAED;;;AACA,SAASU,iBAAT,CAA2BC,GAA3B,EAAgC;EAC9B,OAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBH,MAAjB,CAAwB,UAASnB,GAAT,EAAca,IAAd,EAAoB;IACjD,IAAIY,WAAW,GAAIlB,qBAAqB,CAACM,IAAD,CAAxC;IACA,IAAIa,YAAY,GAAGnB,qBAAqB,CAACe,GAAG,CAACT,IAAD,CAAJ,CAAxC;IACAb,GAAG,IAAI,CAACA,GAAG,GAAG,IAAH,GAAU,EAAd,IAAoByB,WAApB,GAAkC,GAAlC,GAAwCC,YAA/C;IACA,OAAO1B,GAAP;EACD,CALM,EAKJ,EALI,CAAP;AAMD,C,CAED;;;AACA2B,OAAO,CAACC,IAAR,GAAeb,oBAAf,C,CAEA;;AACAY,OAAO,CAACE,KAAR,GAAgBR,iBAAhB"},"metadata":{},"sourceType":"script"}