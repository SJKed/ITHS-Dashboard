{"ast":null,"code":"var assert = require('assert');\n\nvar fs = require('fs');\n\nvar mime = require('mime');\n\nvar util = require('util');\n\nvar MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024;\nvar MAX_FILE_CHUNK_BYTES = 5 * 1024 * 1024;\n/**\n * FileUploader class used to upload a file to twitter via the /media/upload (chunked) API.\n * Usage:\n *   var fu = new FileUploader({ file_path: '/foo/bar/baz.mp4' }, twit);\n *   fu.upload(function (err, bodyObj, resp) {\n *     console.log(err, bodyObj);\n *   })\n *\n * @param  {Object}         params  Object of the form { file_path: String }.\n * @param  {Twit(object)}   twit    Twit instance.\n */\n\nvar FileUploader = function (params, twit) {\n  assert(params);\n  assert(params.file_path, 'Must specify `file_path` to upload a file. Got: ' + params.file_path + '.');\n  var self = this;\n  self._file_path = params.file_path;\n  self._twit = twit;\n  self._isUploading = false;\n  self._isFileStreamEnded = false;\n  self._isSharedMedia = !!params.shared;\n};\n/**\n * Upload a file to Twitter via the /media/upload (chunked) API.\n *\n * @param  {Function} cb function (err, data, resp)\n */\n\n\nFileUploader.prototype.upload = function (cb) {\n  var self = this; // Send INIT command with file info and get back a media_id_string we can use to APPEND chunks to it.\n\n  self._initMedia(function (err, bodyObj, resp) {\n    if (err) {\n      cb(err);\n      return;\n    } else {\n      var mediaTmpId = bodyObj.media_id_string;\n      var chunkNumber = 0;\n      var mediaFile = fs.createReadStream(self._file_path, {\n        highWatermark: MAX_FILE_CHUNK_BYTES\n      });\n      mediaFile.on('data', function (chunk) {\n        // Pause our file stream from emitting `data` events until the upload of this chunk completes.\n        // Any data that becomes available will remain in the internal buffer.\n        mediaFile.pause();\n        self._isUploading = true;\n\n        self._appendMedia(mediaTmpId, chunk.toString('base64'), chunkNumber, function (err, bodyObj, resp) {\n          self._isUploading = false;\n\n          if (err) {\n            cb(err);\n          } else {\n            if (self._isUploadComplete()) {\n              // We've hit the end of our stream; send FINALIZE command.\n              self._finalizeMedia(mediaTmpId, cb);\n            } else {\n              // Tell our file stream to start emitting `data` events again.\n              chunkNumber++;\n              mediaFile.resume();\n            }\n          }\n        });\n      });\n      mediaFile.on('end', function () {\n        // Mark our file streaming complete, and if done, send FINALIZE command.\n        self._isFileStreamEnded = true;\n\n        if (self._isUploadComplete()) {\n          self._finalizeMedia(mediaTmpId, cb);\n        }\n      });\n    }\n  });\n};\n\nFileUploader.prototype._isUploadComplete = function () {\n  return !this._isUploading && this._isFileStreamEnded;\n};\n/**\n * Send FINALIZE command for media object with id `media_id`.\n *\n * @param  {String}   media_id\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._finalizeMedia = function (media_id, cb) {\n  var self = this;\n\n  self._twit.post('media/upload', {\n    command: 'FINALIZE',\n    media_id: media_id\n  }, cb);\n};\n/**\n * Send APPEND command for media object with id `media_id`.\n * Append the chunk to the media object, then resume streaming our mediaFile.\n *\n * @param  {String}   media_id        media_id_string received from Twitter after sending INIT comand.\n * @param  {String}   chunk_part      Base64-encoded String chunk of the media file.\n * @param  {Number}   segment_index   Index of the segment.\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._appendMedia = function (media_id_string, chunk_part, segment_index, cb) {\n  var self = this;\n\n  self._twit.post('media/upload', {\n    command: 'APPEND',\n    media_id: media_id_string.toString(),\n    segment_index: segment_index,\n    media: chunk_part\n  }, cb);\n};\n/**\n * Send INIT command for our underlying media object.\n *\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._initMedia = function (cb) {\n  var self = this;\n  var mediaType = mime.lookup(self._file_path);\n  var mediaFileSizeBytes = fs.statSync(self._file_path).size;\n  var shared = self._isSharedMedia;\n  var media_category = 'tweet_image';\n\n  if (mediaType.toLowerCase().indexOf('gif') > -1) {\n    media_category = 'tweet_gif';\n  } else if (mediaType.toLowerCase().indexOf('video') > -1) {\n    media_category = 'tweet_video';\n  } // Check the file size - it should not go over 15MB for video.\n  // See https://dev.twitter.com/rest/reference/post/media/upload-chunked\n\n\n  if (mediaFileSizeBytes < MAX_FILE_SIZE_BYTES) {\n    self._twit.post('media/upload', {\n      'command': 'INIT',\n      'media_type': mediaType,\n      'total_bytes': mediaFileSizeBytes,\n      'shared': shared,\n      'media_category': media_category\n    }, cb);\n  } else {\n    var errMsg = util.format('This file is too large. Max size is %dB. Got: %dB.', MAX_FILE_SIZE_BYTES, mediaFileSizeBytes);\n    cb(new Error(errMsg));\n  }\n};\n\nmodule.exports = FileUploader;","map":{"version":3,"names":["assert","require","fs","mime","util","MAX_FILE_SIZE_BYTES","MAX_FILE_CHUNK_BYTES","FileUploader","params","twit","file_path","self","_file_path","_twit","_isUploading","_isFileStreamEnded","_isSharedMedia","shared","prototype","upload","cb","_initMedia","err","bodyObj","resp","mediaTmpId","media_id_string","chunkNumber","mediaFile","createReadStream","highWatermark","on","chunk","pause","_appendMedia","toString","_isUploadComplete","_finalizeMedia","resume","media_id","post","command","chunk_part","segment_index","media","mediaType","lookup","mediaFileSizeBytes","statSync","size","media_category","toLowerCase","indexOf","errMsg","format","Error","module","exports"],"sources":["/mnt/c/users/46721/documents/iths/ITHS-Dashboard/node_modules/twit/lib/file_uploader.js"],"sourcesContent":["var assert = require('assert');\nvar fs = require('fs');\nvar mime = require('mime');\nvar util = require('util');\n\nvar MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024;\nvar MAX_FILE_CHUNK_BYTES = 5 * 1024 * 1024;\n\n/**\n * FileUploader class used to upload a file to twitter via the /media/upload (chunked) API.\n * Usage:\n *   var fu = new FileUploader({ file_path: '/foo/bar/baz.mp4' }, twit);\n *   fu.upload(function (err, bodyObj, resp) {\n *     console.log(err, bodyObj);\n *   })\n *\n * @param  {Object}         params  Object of the form { file_path: String }.\n * @param  {Twit(object)}   twit    Twit instance.\n */\nvar FileUploader = function (params, twit) {\n  assert(params)\n  assert(params.file_path, 'Must specify `file_path` to upload a file. Got: ' + params.file_path + '.')\n  var self = this;\n  self._file_path = params.file_path;\n  self._twit = twit;\n  self._isUploading = false;\n  self._isFileStreamEnded = false;\n  self._isSharedMedia = !!params.shared;\n}\n\n/**\n * Upload a file to Twitter via the /media/upload (chunked) API.\n *\n * @param  {Function} cb function (err, data, resp)\n */\nFileUploader.prototype.upload = function (cb) {\n  var self = this;\n\n  // Send INIT command with file info and get back a media_id_string we can use to APPEND chunks to it.\n  self._initMedia(function (err, bodyObj, resp) {\n    if (err) {\n      cb(err);\n      return;\n    } else {\n      var mediaTmpId = bodyObj.media_id_string;\n      var chunkNumber = 0;\n      var mediaFile = fs.createReadStream(self._file_path, { highWatermark: MAX_FILE_CHUNK_BYTES });\n\n      mediaFile.on('data', function (chunk) {\n        // Pause our file stream from emitting `data` events until the upload of this chunk completes.\n        // Any data that becomes available will remain in the internal buffer.\n        mediaFile.pause();\n        self._isUploading = true;\n\n        self._appendMedia(mediaTmpId, chunk.toString('base64'), chunkNumber, function (err, bodyObj, resp) {\n          self._isUploading = false;\n          if (err) {\n            cb(err);\n          } else {\n            if (self._isUploadComplete()) {\n              // We've hit the end of our stream; send FINALIZE command.\n              self._finalizeMedia(mediaTmpId, cb);\n            } else {\n              // Tell our file stream to start emitting `data` events again.\n              chunkNumber++;\n              mediaFile.resume();\n            }\n          }\n        });\n      });\n\n      mediaFile.on('end', function () {\n        // Mark our file streaming complete, and if done, send FINALIZE command.\n        self._isFileStreamEnded = true;\n        if (self._isUploadComplete()) {\n          self._finalizeMedia(mediaTmpId, cb);\n        }\n      });\n    }\n  })\n}\n\nFileUploader.prototype._isUploadComplete = function () {\n  return !this._isUploading && this._isFileStreamEnded;\n}\n\n  /**\n   * Send FINALIZE command for media object with id `media_id`.\n   *\n   * @param  {String}   media_id\n   * @param  {Function} cb\n   */\nFileUploader.prototype._finalizeMedia = function(media_id, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'FINALIZE',\n    media_id: media_id\n  }, cb);\n}\n\n  /**\n   * Send APPEND command for media object with id `media_id`.\n   * Append the chunk to the media object, then resume streaming our mediaFile.\n   *\n   * @param  {String}   media_id        media_id_string received from Twitter after sending INIT comand.\n   * @param  {String}   chunk_part      Base64-encoded String chunk of the media file.\n   * @param  {Number}   segment_index   Index of the segment.\n   * @param  {Function} cb\n   */\nFileUploader.prototype._appendMedia = function(media_id_string, chunk_part, segment_index, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'APPEND',\n    media_id: media_id_string.toString(),\n    segment_index: segment_index,\n    media: chunk_part,\n  }, cb);\n}\n\n/**\n * Send INIT command for our underlying media object.\n *\n * @param  {Function} cb\n */\nFileUploader.prototype._initMedia = function (cb) {\n  var self = this;\n  var mediaType = mime.lookup(self._file_path);\n  var mediaFileSizeBytes = fs.statSync(self._file_path).size;\n  var shared = self._isSharedMedia;\n  var media_category = 'tweet_image';\n\n  if (mediaType.toLowerCase().indexOf('gif') > -1) {\n    media_category = 'tweet_gif';\n  } else if (mediaType.toLowerCase().indexOf('video') > -1) {\n    media_category = 'tweet_video';\n  }\n\n  // Check the file size - it should not go over 15MB for video.\n  // See https://dev.twitter.com/rest/reference/post/media/upload-chunked\n  if (mediaFileSizeBytes < MAX_FILE_SIZE_BYTES) {\n    self._twit.post('media/upload', {\n      'command': 'INIT',\n      'media_type': mediaType,\n      'total_bytes': mediaFileSizeBytes,\n      'shared': shared,\n      'media_category': media_category\n    }, cb);\n  } else {\n    var errMsg = util.format('This file is too large. Max size is %dB. Got: %dB.', MAX_FILE_SIZE_BYTES, mediaFileSizeBytes);\n    cb(new Error(errMsg));\n  }\n}\n\nmodule.exports = FileUploader\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}