{"ast":null,"code":"//\n//  Twitter API Wrapper\n//\nvar assert = require('assert');\n\nvar Promise = require('bluebird');\n\nvar request = require('request');\n\nvar util = require('util');\n\nvar endpoints = require('./endpoints');\n\nvar FileUploader = require('./file_uploader');\n\nvar helpers = require('./helpers');\n\nvar StreamingAPIConnection = require('./streaming-api-connection');\n\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON; // config values required for app-only auth\n\n\nvar required_for_app_auth = ['consumer_key', 'consumer_secret']; // config values required for user auth (superset of app-only auth)\n\nvar required_for_user_auth = required_for_app_auth.concat(['access_token', 'access_token_secret']);\nvar FORMDATA_PATHS = ['media/upload', 'account/update_profile_image', 'account/update_profile_background_image'];\nvar JSONPAYLOAD_PATHS = ['media/metadata/create', 'direct_messages/events/new', 'direct_messages/welcome_messages/new', 'direct_messages/welcome_messages/rules/new']; //\n//  Twitter\n//\n\nvar Twitter = function (config) {\n  if (!(this instanceof Twitter)) {\n    return new Twitter(config);\n  }\n\n  var self = this;\n  var credentials = {\n    consumer_key: config.consumer_key,\n    consumer_secret: config.consumer_secret,\n    // access_token and access_token_secret only required for user auth\n    access_token: config.access_token,\n    access_token_secret: config.access_token_secret,\n    // flag indicating whether requests should be made with application-only auth\n    app_only_auth: config.app_only_auth\n  };\n\n  this._validateConfigOrThrow(config);\n\n  this.config = config;\n  this._twitter_time_minus_local_time_ms = 0;\n};\n\nTwitter.prototype.get = function (path, params, callback) {\n  return this.request('GET', path, params, callback);\n};\n\nTwitter.prototype.post = function (path, params, callback) {\n  return this.request('POST', path, params, callback);\n};\n\nTwitter.prototype.delete = function (path, params, callback) {\n  return this.request('DELETE', path, params, callback);\n};\n\nTwitter.prototype.request = function (method, path, params, callback) {\n  var self = this;\n  assert(method == 'GET' || method == 'POST' || method == 'DELETE'); // if no `params` is specified but a callback is, use default params\n\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _returnErrorToUser = function (err) {\n      if (callback && typeof callback === 'function') {\n        callback(err, null, null);\n      } else {\n        reject(err);\n      }\n    };\n\n    self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n      if (err) {\n        _returnErrorToUser(err);\n\n        return;\n      }\n\n      var twitOptions = params && params.twit_options || {};\n      process.nextTick(function () {\n        // ensure all HTTP i/o occurs after the user has a chance to bind their event handlers\n        self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n          self._updateClockOffsetFromResponse(resp);\n\n          var peerCertificate = resp && resp.socket && resp.socket.getPeerCertificate();\n\n          if (self.config.trusted_cert_fingerprints && peerCertificate) {\n            if (!resp.socket.authorized) {\n              // The peer certificate was not signed by one of the authorized CA's.\n              var authErrMsg = resp.socket.authorizationError.toString();\n              var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n\n              _returnErrorToUser(err);\n\n              return;\n            }\n\n            var fingerprint = peerCertificate.fingerprint;\n            var trustedFingerprints = self.config.trusted_cert_fingerprints;\n\n            if (trustedFingerprints.indexOf(fingerprint) === -1) {\n              var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.', trustedFingerprints.join(','), fingerprint);\n              var err = new Error(errMsg);\n\n              _returnErrorToUser(err);\n\n              return;\n            }\n          }\n\n          if (callback && typeof callback === 'function') {\n            callback(err, parsedBody, resp);\n          } else {\n            if (err) {\n              reject(err);\n            } else {\n              resolve({\n                data: parsedBody,\n                resp: resp\n              });\n            }\n          }\n\n          return;\n        });\n      });\n    });\n  });\n};\n/**\n * Uploads a file to Twitter via the POST media/upload (chunked) API.\n * Use this as an easier alternative to doing the INIT/APPEND/FINALIZE commands yourself.\n * Returns the response from the FINALIZE command, or if an error occurs along the way,\n * the first argument to `cb` will be populated with a non-null Error.\n *\n *\n * `params` is an Object of the form:\n * {\n *   file_path: String // Absolute path of file to be uploaded.\n * }\n *\n * @param  {Object}  params  options object (described above).\n * @param  {cb}      cb      callback of the form: function (err, bodyObj, resp)\n */\n\n\nTwitter.prototype.postMediaChunked = function (params, cb) {\n  var self = this;\n\n  try {\n    var fileUploader = new FileUploader(params, self);\n  } catch (err) {\n    cb(err);\n    return;\n  }\n\n  fileUploader.upload(cb);\n};\n\nTwitter.prototype._updateClockOffsetFromResponse = function (resp) {\n  var self = this;\n\n  if (resp && resp.headers && resp.headers.date && new Date(resp.headers.date).toString() !== 'Invalid Date') {\n    var twitterTimeMs = new Date(resp.headers.date).getTime();\n    self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n};\n/**\n * Builds and returns an options object ready to pass to `request()`\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {String}   path        REST API resource uri (eg. \"statuses/destroy/:id\")\n * @param  {Object}   params      user's params object\n * @param  {Boolean}  isStreaming Flag indicating if it's a request to the Streaming API (different endpoint)\n * @returns {Undefined}\n *\n * Calls `callback` with Error, Object where Object is an options object ready to pass to `request()`.\n *\n * Returns error raised (if any) by `helpers.moveParamsIntoPath()`\n */\n\n\nTwitter.prototype._buildReqOpts = function (method, path, params, isStreaming, callback) {\n  var self = this;\n\n  if (!params) {\n    params = {};\n  } // clone `params` object so we can modify it without modifying the user's reference\n\n\n  var paramsClone = JSON.parse(JSON.stringify(params)); // convert any arrays in `paramsClone` to comma-seperated strings\n\n  var finalParams = this.normalizeParams(paramsClone);\n  delete finalParams.twit_options; // the options object passed to `request` used to perform the HTTP request\n\n  var reqOpts = {\n    headers: {\n      'Accept': '*/*',\n      'User-Agent': 'twit-client'\n    },\n    gzip: true,\n    encoding: null\n  };\n\n  if (typeof self.config.timeout_ms !== 'undefined' && !isStreaming) {\n    reqOpts.timeout = self.config.timeout_ms;\n  }\n\n  if (typeof self.config.strictSSL !== 'undefined') {\n    reqOpts.strictSSL = self.config.strictSSL;\n  } // finalize the `path` value by building it using user-supplied params\n  // when json parameters should not be in the payload\n\n\n  if (JSONPAYLOAD_PATHS.indexOf(path) === -1) {\n    try {\n      path = helpers.moveParamsIntoPath(finalParams, path);\n    } catch (e) {\n      callback(e, null, null);\n      return;\n    }\n  }\n\n  if (path.match(/^https?:\\/\\//i)) {\n    // This is a full url request\n    reqOpts.url = path;\n  } else if (isStreaming) {\n    // This is a Streaming API request.\n    var stream_endpoint_map = {\n      user: endpoints.USER_STREAM,\n      site: endpoints.SITE_STREAM\n    };\n    var endpoint = stream_endpoint_map[path] || endpoints.PUB_STREAM;\n    reqOpts.url = endpoint + path + '.json';\n  } else {\n    // This is a REST API request.\n    if (path.indexOf('media/') !== -1) {\n      // For media/upload, use a different endpoint.\n      reqOpts.url = endpoints.MEDIA_UPLOAD + path + '.json';\n    } else {\n      reqOpts.url = endpoints.REST_ROOT + path + '.json';\n    }\n\n    if (FORMDATA_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'multipart/form-data';\n      reqOpts.form = finalParams; // set finalParams to empty object so we don't append a query string\n      // of the params\n\n      finalParams = {};\n    } else if (JSONPAYLOAD_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'application/json';\n      reqOpts.json = true;\n      reqOpts.body = finalParams; // as above, to avoid appending query string for body params\n\n      finalParams = {};\n    } else {\n      reqOpts.headers['Content-type'] = 'application/json';\n    }\n  }\n\n  if (isStreaming) {\n    reqOpts.form = finalParams;\n  } else if (Object.keys(finalParams).length) {\n    // not all of the user's parameters were used to build the request path\n    // add them as a query string\n    var qs = helpers.makeQueryString(finalParams);\n    reqOpts.url += '?' + qs;\n  }\n\n  if (!self.config.app_only_auth) {\n    // with user auth, we can just pass an oauth object to requests\n    // to have the request signed\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n\n    reqOpts.oauth = {\n      consumer_key: self.config.consumer_key,\n      consumer_secret: self.config.consumer_secret,\n      token: self.config.access_token,\n      token_secret: self.config.access_token_secret,\n      timestamp: Math.floor(oauth_ts / 1000).toString()\n    };\n    callback(null, reqOpts);\n    return;\n  } else {\n    // we're using app-only auth, so we need to ensure we have a bearer token\n    // Once we have a bearer token, add the Authorization header and return the fully qualified `reqOpts`.\n    self._getBearerToken(function (err, bearerToken) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      reqOpts.headers['Authorization'] = 'Bearer ' + bearerToken;\n      callback(null, reqOpts);\n      return;\n    });\n  }\n};\n/**\n * Make HTTP request to Twitter REST API.\n * @param  {Object}   reqOpts     options object passed to `request()`\n * @param  {Object}   twitOptions\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {Function} callback    user's callback\n * @return {Undefined}\n */\n\n\nTwitter.prototype._doRestApiRequest = function (reqOpts, twitOptions, method, callback) {\n  var request_method = request[method.toLowerCase()];\n  var req = request_method(reqOpts);\n  var body = '';\n  var response = null;\n\n  var onRequestComplete = function () {\n    if (body !== '') {\n      try {\n        body = JSON.parse(body);\n      } catch (jsonDecodeError) {\n        // there was no transport-level error, but a JSON object could not be decoded from the request body\n        // surface this to the caller\n        var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n        err.statusCode = response ? response.statusCode : null;\n        err.allErrors.concat({\n          error: jsonDecodeError.toString()\n        });\n        callback(err, body, response);\n        return;\n      }\n    }\n\n    if (typeof body === 'object' && (body.error || body.errors)) {\n      // we got a Twitter API-level error response\n      // place the errors in the HTTP response body into the Error object and pass control to caller\n      var err = helpers.makeTwitError('Twitter API Error');\n      err.statusCode = response ? response.statusCode : null;\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    } // success case - no errors in HTTP response body\n\n\n    callback(err, body, response);\n  };\n\n  req.on('response', function (res) {\n    response = res; // read data from `request` object which contains the decompressed HTTP response body,\n    // `response` is the unmodified http.IncomingMessage object which may contain compressed data\n\n    req.on('data', function (chunk) {\n      body += chunk.toString('utf8');\n    }); // we're done reading the response\n\n    req.on('end', function () {\n      onRequestComplete();\n    });\n  });\n  req.on('error', function (err) {\n    // transport-level error occurred - likely a socket error\n    if (twitOptions.retry && STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1) {\n      // retry the request since retries were specified and we got a status code we should retry on\n      self.request(method, path, params, callback);\n      return;\n    } else {\n      // pass the transport-level error to the caller\n      err.statusCode = null;\n      err.code = null;\n      err.allErrors = [];\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    }\n  });\n};\n/**\n * Creates/starts a connection object that stays connected to Twitter's servers\n * using Twitter's rules.\n *\n * @param  {String} path   Resource path to connect to (eg. \"statuses/sample\")\n * @param  {Object} params user's params object\n * @return {StreamingAPIConnection}        [description]\n */\n\n\nTwitter.prototype.stream = function (path, params) {\n  var self = this;\n  var twitOptions = params && params.twit_options || {};\n  var streamingConnection = new StreamingAPIConnection();\n\n  self._buildReqOpts('POST', path, params, true, function (err, reqOpts) {\n    if (err) {\n      // we can get an error if we fail to obtain a bearer token or construct reqOpts\n      // surface this on the streamingConnection instance (where a user may register their error handler)\n      streamingConnection.emit('error', err);\n      return;\n    } // set the properties required to start the connection\n\n\n    streamingConnection.reqOpts = reqOpts;\n    streamingConnection.twitOptions = twitOptions;\n    process.nextTick(function () {\n      streamingConnection.start();\n    });\n  });\n\n  return streamingConnection;\n};\n/**\n * Gets bearer token from cached reference on `self`, or fetches a new one and sets it on `self`.\n *\n * @param  {Function} callback Function to invoke with (Error, bearerToken)\n * @return {Undefined}\n */\n\n\nTwitter.prototype._getBearerToken = function (callback) {\n  var self = this;\n\n  if (self._bearerToken) {\n    return callback(null, self._bearerToken);\n  }\n\n  helpers.getBearerToken(self.config.consumer_key, self.config.consumer_secret, function (err, bearerToken) {\n    if (err) {\n      // return the fully-qualified Twit Error object to caller\n      callback(err, null);\n      return;\n    }\n\n    self._bearerToken = bearerToken;\n    callback(null, self._bearerToken);\n    return;\n  });\n};\n\nTwitter.prototype.normalizeParams = function (params) {\n  var normalized = params;\n\n  if (params && typeof params === 'object') {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key]; // replace any arrays in `params` with comma-separated string\n\n      if (Array.isArray(value)) normalized[key] = value.join(',');\n    });\n  } else if (!params) {\n    normalized = {};\n  }\n\n  return normalized;\n};\n\nTwitter.prototype.setAuth = function (auth) {\n  var self = this;\n  var configKeys = ['consumer_key', 'consumer_secret', 'access_token', 'access_token_secret']; // update config\n\n  configKeys.forEach(function (k) {\n    if (auth[k]) {\n      self.config[k] = auth[k];\n    }\n  });\n\n  this._validateConfigOrThrow(self.config);\n};\n\nTwitter.prototype.getAuth = function () {\n  return this.config;\n}; //\n// Check that the required auth credentials are present in `config`.\n// @param {Object}  config  Object containing credentials for REST API auth\n//\n\n\nTwitter.prototype._validateConfigOrThrow = function (config) {\n  //check config for proper format\n  if (typeof config !== 'object') {\n    throw new TypeError('config must be object, got ' + typeof config);\n  }\n\n  if (typeof config.timeout_ms !== 'undefined' && isNaN(Number(config.timeout_ms))) {\n    throw new TypeError('Twit config `timeout_ms` must be a Number. Got: ' + config.timeout_ms + '.');\n  }\n\n  if (typeof config.strictSSL !== 'undefined' && typeof config.strictSSL !== 'boolean') {\n    throw new TypeError('Twit config `strictSSL` must be a Boolean. Got: ' + config.strictSSL + '.');\n  }\n\n  if (config.app_only_auth) {\n    var auth_type = 'app-only auth';\n    var required_keys = required_for_app_auth;\n  } else {\n    var auth_type = 'user auth';\n    var required_keys = required_for_user_auth;\n  }\n\n  required_keys.forEach(function (req_key) {\n    if (!config[req_key]) {\n      var err_msg = util.format('Twit config must include `%s` when using %s.', req_key, auth_type);\n      throw new Error(err_msg);\n    }\n  });\n};\n\nmodule.exports = Twitter;","map":{"version":3,"names":["assert","require","Promise","request","util","endpoints","FileUploader","helpers","StreamingAPIConnection","STATUS_CODES_TO_ABORT_ON","required_for_app_auth","required_for_user_auth","concat","FORMDATA_PATHS","JSONPAYLOAD_PATHS","Twitter","config","self","credentials","consumer_key","consumer_secret","access_token","access_token_secret","app_only_auth","_validateConfigOrThrow","_twitter_time_minus_local_time_ms","prototype","get","path","params","callback","post","delete","method","resolve","reject","_returnErrorToUser","err","_buildReqOpts","reqOpts","twitOptions","twit_options","process","nextTick","_doRestApiRequest","parsedBody","resp","_updateClockOffsetFromResponse","peerCertificate","socket","getPeerCertificate","trusted_cert_fingerprints","authorized","authErrMsg","authorizationError","toString","makeTwitError","fingerprint","trustedFingerprints","indexOf","errMsg","format","join","Error","data","postMediaChunked","cb","fileUploader","upload","headers","date","Date","twitterTimeMs","getTime","now","isStreaming","paramsClone","JSON","parse","stringify","finalParams","normalizeParams","gzip","encoding","timeout_ms","timeout","strictSSL","moveParamsIntoPath","e","match","url","stream_endpoint_map","user","USER_STREAM","site","SITE_STREAM","endpoint","PUB_STREAM","MEDIA_UPLOAD","REST_ROOT","form","json","body","Object","keys","length","qs","makeQueryString","oauth_ts","oauth","token","token_secret","timestamp","Math","floor","_getBearerToken","bearerToken","request_method","toLowerCase","req","response","onRequestComplete","jsonDecodeError","statusCode","allErrors","error","errors","attachBodyInfoToError","on","res","chunk","retry","code","stream","streamingConnection","emit","start","_bearerToken","getBearerToken","normalized","forEach","key","value","Array","isArray","setAuth","auth","configKeys","k","getAuth","TypeError","isNaN","Number","auth_type","required_keys","req_key","err_msg","module","exports"],"sources":["/mnt/c/users/46721/documents/iths/ITHS-Dashboard/node_modules/twit/lib/twitter.js"],"sourcesContent":["//\n//  Twitter API Wrapper\n//\nvar assert = require('assert');\nvar Promise = require('bluebird');\nvar request = require('request');\nvar util = require('util');\nvar endpoints = require('./endpoints');\nvar FileUploader = require('./file_uploader');\nvar helpers = require('./helpers');\nvar StreamingAPIConnection = require('./streaming-api-connection');\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON;\n\n// config values required for app-only auth\nvar required_for_app_auth = [\n  'consumer_key',\n  'consumer_secret'\n];\n\n// config values required for user auth (superset of app-only auth)\nvar required_for_user_auth = required_for_app_auth.concat([\n  'access_token',\n  'access_token_secret'\n]);\n\nvar FORMDATA_PATHS = [\n  'media/upload',\n  'account/update_profile_image',\n  'account/update_profile_background_image',\n];\n\nvar JSONPAYLOAD_PATHS = [\n  'media/metadata/create',\n  'direct_messages/events/new',\n  'direct_messages/welcome_messages/new',\n  'direct_messages/welcome_messages/rules/new',\n];\n\n//\n//  Twitter\n//\nvar Twitter = function (config) {\n  if (!(this instanceof Twitter)) {\n    return new Twitter(config);\n  }\n\n  var self = this\n  var credentials = {\n    consumer_key        : config.consumer_key,\n    consumer_secret     : config.consumer_secret,\n    // access_token and access_token_secret only required for user auth\n    access_token        : config.access_token,\n    access_token_secret : config.access_token_secret,\n    // flag indicating whether requests should be made with application-only auth\n    app_only_auth       : config.app_only_auth,\n  }\n\n  this._validateConfigOrThrow(config);\n  this.config = config;\n  this._twitter_time_minus_local_time_ms = 0;\n}\n\nTwitter.prototype.get = function (path, params, callback) {\n  return this.request('GET', path, params, callback)\n}\n\nTwitter.prototype.post = function (path, params, callback) {\n  return this.request('POST', path, params, callback)\n}\n\nTwitter.prototype.delete = function (path, params, callback) {\n  return this.request('DELETE', path, params, callback)\n}\n\nTwitter.prototype.request = function (method, path, params, callback) {\n  var self = this;\n  assert(method == 'GET' || method == 'POST' || method == 'DELETE');\n  // if no `params` is specified but a callback is, use default params\n  if (typeof params === 'function') {\n    callback = params\n    params = {}\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _returnErrorToUser = function (err) {\n      if (callback && typeof callback === 'function') {\n        callback(err, null, null);\n      } else {\n        reject(err);\n      }\n    }\n\n    self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n      if (err) {\n        _returnErrorToUser(err);\n        return\n      }\n\n      var twitOptions = (params && params.twit_options) || {};\n\n      process.nextTick(function () {\n        // ensure all HTTP i/o occurs after the user has a chance to bind their event handlers\n        self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n          self._updateClockOffsetFromResponse(resp);\n          var peerCertificate = resp && resp.socket && resp.socket.getPeerCertificate();\n\n          if (self.config.trusted_cert_fingerprints && peerCertificate) {\n            if (!resp.socket.authorized) {\n              // The peer certificate was not signed by one of the authorized CA's.\n              var authErrMsg = resp.socket.authorizationError.toString();\n              var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n            var fingerprint = peerCertificate.fingerprint;\n            var trustedFingerprints = self.config.trusted_cert_fingerprints;\n            if (trustedFingerprints.indexOf(fingerprint) === -1) {\n              var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                       trustedFingerprints.join(','), fingerprint);\n              var err = new Error(errMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n          }\n\n          if (callback && typeof callback === 'function') {\n            callback(err, parsedBody, resp);\n          } else {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ data: parsedBody, resp: resp });\n            }\n          }\n\n          return;\n        })\n      })\n    });\n  });\n}\n\n/**\n * Uploads a file to Twitter via the POST media/upload (chunked) API.\n * Use this as an easier alternative to doing the INIT/APPEND/FINALIZE commands yourself.\n * Returns the response from the FINALIZE command, or if an error occurs along the way,\n * the first argument to `cb` will be populated with a non-null Error.\n *\n *\n * `params` is an Object of the form:\n * {\n *   file_path: String // Absolute path of file to be uploaded.\n * }\n *\n * @param  {Object}  params  options object (described above).\n * @param  {cb}      cb      callback of the form: function (err, bodyObj, resp)\n */\nTwitter.prototype.postMediaChunked = function (params, cb) {\n  var self = this;\n  try {\n    var fileUploader = new FileUploader(params, self);\n  } catch(err) {\n    cb(err);\n    return;\n  }\n  fileUploader.upload(cb);\n}\n\nTwitter.prototype._updateClockOffsetFromResponse = function (resp) {\n  var self = this;\n  if (resp && resp.headers && resp.headers.date &&\n      new Date(resp.headers.date).toString() !== 'Invalid Date'\n  ) {\n    var twitterTimeMs = new Date(resp.headers.date).getTime()\n    self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n}\n\n/**\n * Builds and returns an options object ready to pass to `request()`\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {String}   path        REST API resource uri (eg. \"statuses/destroy/:id\")\n * @param  {Object}   params      user's params object\n * @param  {Boolean}  isStreaming Flag indicating if it's a request to the Streaming API (different endpoint)\n * @returns {Undefined}\n *\n * Calls `callback` with Error, Object where Object is an options object ready to pass to `request()`.\n *\n * Returns error raised (if any) by `helpers.moveParamsIntoPath()`\n */\nTwitter.prototype._buildReqOpts = function (method, path, params, isStreaming, callback) {\n  var self = this\n  if (!params) {\n    params = {}\n  }\n  // clone `params` object so we can modify it without modifying the user's reference\n  var paramsClone = JSON.parse(JSON.stringify(params))\n  // convert any arrays in `paramsClone` to comma-seperated strings\n  var finalParams = this.normalizeParams(paramsClone)\n  delete finalParams.twit_options\n\n  // the options object passed to `request` used to perform the HTTP request\n  var reqOpts = {\n    headers: {\n      'Accept': '*/*',\n      'User-Agent': 'twit-client'\n    },\n    gzip: true,\n    encoding: null,\n  }\n\n  if (typeof self.config.timeout_ms !== 'undefined' && !isStreaming) {\n    reqOpts.timeout = self.config.timeout_ms;\n  }\n\n  if (typeof self.config.strictSSL !== 'undefined') {\n    reqOpts.strictSSL = self.config.strictSSL;\n  }\n  \n  // finalize the `path` value by building it using user-supplied params\n  // when json parameters should not be in the payload\n  if (JSONPAYLOAD_PATHS.indexOf(path) === -1) {\n    try {\n      path = helpers.moveParamsIntoPath(finalParams, path)\n    } catch (e) {\n      callback(e, null, null)\n      return\n    }\n  }\n\n  if (path.match(/^https?:\\/\\//i)) {\n    // This is a full url request\n    reqOpts.url = path\n  } else\n  if (isStreaming) {\n    // This is a Streaming API request.\n\n    var stream_endpoint_map = {\n      user: endpoints.USER_STREAM,\n      site: endpoints.SITE_STREAM\n    }\n    var endpoint = stream_endpoint_map[path] || endpoints.PUB_STREAM\n    reqOpts.url = endpoint + path + '.json'\n  } else {\n    // This is a REST API request.\n\n    if (path.indexOf('media/') !== -1) {\n      // For media/upload, use a different endpoint.\n      reqOpts.url = endpoints.MEDIA_UPLOAD + path + '.json';\n    } else {\n      reqOpts.url = endpoints.REST_ROOT + path + '.json';\n    }\n\n    if (FORMDATA_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'multipart/form-data';\n      reqOpts.form = finalParams;\n       // set finalParams to empty object so we don't append a query string\n      // of the params\n      finalParams = {};\n    } else if (JSONPAYLOAD_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'application/json';\n      reqOpts.json = true;\n      reqOpts.body = finalParams;\n      // as above, to avoid appending query string for body params\n      finalParams = {};\n    } else {\n      reqOpts.headers['Content-type'] = 'application/json';\n    }\n  }\n\n  if (isStreaming) {\n    reqOpts.form = finalParams\n  } else if (Object.keys(finalParams).length) {\n    // not all of the user's parameters were used to build the request path\n    // add them as a query string\n    var qs = helpers.makeQueryString(finalParams)\n    reqOpts.url += '?' + qs\n  }\n\n  if (!self.config.app_only_auth) {\n    // with user auth, we can just pass an oauth object to requests\n    // to have the request signed\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n\n    reqOpts.oauth = {\n      consumer_key: self.config.consumer_key,\n      consumer_secret: self.config.consumer_secret,\n      token: self.config.access_token,\n      token_secret: self.config.access_token_secret,\n      timestamp: Math.floor(oauth_ts/1000).toString(),\n    }\n\n    callback(null, reqOpts);\n    return;\n  } else {\n    // we're using app-only auth, so we need to ensure we have a bearer token\n    // Once we have a bearer token, add the Authorization header and return the fully qualified `reqOpts`.\n    self._getBearerToken(function (err, bearerToken) {\n      if (err) {\n        callback(err, null)\n        return\n      }\n\n      reqOpts.headers['Authorization'] = 'Bearer ' + bearerToken;\n      callback(null, reqOpts)\n      return\n    })\n  }\n}\n\n/**\n * Make HTTP request to Twitter REST API.\n * @param  {Object}   reqOpts     options object passed to `request()`\n * @param  {Object}   twitOptions\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {Function} callback    user's callback\n * @return {Undefined}\n */\nTwitter.prototype._doRestApiRequest = function (reqOpts, twitOptions, method, callback) {\n  var request_method = request[method.toLowerCase()];\n  var req = request_method(reqOpts);\n\n  var body = '';\n  var response = null;\n\n  var onRequestComplete = function () {\n    if (body !== '') {\n      try {\n        body = JSON.parse(body)\n      } catch (jsonDecodeError) {\n        // there was no transport-level error, but a JSON object could not be decoded from the request body\n        // surface this to the caller\n        var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON')\n        err.statusCode = response ? response.statusCode: null;\n        err.allErrors.concat({error: jsonDecodeError.toString()})\n        callback(err, body, response);\n        return\n      }\n    }\n\n    if (typeof body === 'object' && (body.error || body.errors)) {\n      // we got a Twitter API-level error response\n      // place the errors in the HTTP response body into the Error object and pass control to caller\n      var err = helpers.makeTwitError('Twitter API Error')\n      err.statusCode = response ? response.statusCode: null;\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return\n    }\n\n    // success case - no errors in HTTP response body\n    callback(err, body, response)\n  }\n\n  req.on('response', function (res) {\n    response = res\n    // read data from `request` object which contains the decompressed HTTP response body,\n    // `response` is the unmodified http.IncomingMessage object which may contain compressed data\n    req.on('data', function (chunk) {\n      body += chunk.toString('utf8')\n    })\n    // we're done reading the response\n    req.on('end', function () {\n      onRequestComplete()\n    })\n  })\n\n  req.on('error', function (err) {\n    // transport-level error occurred - likely a socket error\n    if (twitOptions.retry &&\n        STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n    ) {\n      // retry the request since retries were specified and we got a status code we should retry on\n      self.request(method, path, params, callback);\n      return;\n    } else {\n      // pass the transport-level error to the caller\n      err.statusCode = null\n      err.code = null\n      err.allErrors = [];\n      helpers.attachBodyInfoToError(err, body)\n      callback(err, body, response);\n      return;\n    }\n  })\n}\n\n/**\n * Creates/starts a connection object that stays connected to Twitter's servers\n * using Twitter's rules.\n *\n * @param  {String} path   Resource path to connect to (eg. \"statuses/sample\")\n * @param  {Object} params user's params object\n * @return {StreamingAPIConnection}        [description]\n */\nTwitter.prototype.stream = function (path, params) {\n  var self = this;\n  var twitOptions = (params && params.twit_options) || {};\n\n  var streamingConnection = new StreamingAPIConnection()\n  self._buildReqOpts('POST', path, params, true, function (err, reqOpts) {\n    if (err) {\n      // we can get an error if we fail to obtain a bearer token or construct reqOpts\n      // surface this on the streamingConnection instance (where a user may register their error handler)\n      streamingConnection.emit('error', err)\n      return\n    }\n    // set the properties required to start the connection\n    streamingConnection.reqOpts = reqOpts\n    streamingConnection.twitOptions = twitOptions\n\n    process.nextTick(function () {\n      streamingConnection.start()\n    })\n  })\n\n  return streamingConnection\n}\n\n/**\n * Gets bearer token from cached reference on `self`, or fetches a new one and sets it on `self`.\n *\n * @param  {Function} callback Function to invoke with (Error, bearerToken)\n * @return {Undefined}\n */\nTwitter.prototype._getBearerToken = function (callback) {\n  var self = this;\n  if (self._bearerToken) {\n    return callback(null, self._bearerToken)\n  }\n\n  helpers.getBearerToken(self.config.consumer_key, self.config.consumer_secret,\n  function (err, bearerToken) {\n    if (err) {\n      // return the fully-qualified Twit Error object to caller\n      callback(err, null);\n      return;\n    }\n    self._bearerToken = bearerToken;\n    callback(null, self._bearerToken);\n    return;\n  })\n}\n\nTwitter.prototype.normalizeParams = function (params) {\n  var normalized = params\n  if (params && typeof params === 'object') {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key]\n      // replace any arrays in `params` with comma-separated string\n      if (Array.isArray(value))\n        normalized[key] = value.join(',')\n    })\n  } else if (!params) {\n    normalized = {}\n  }\n  return normalized\n}\n\nTwitter.prototype.setAuth = function (auth) {\n  var self = this\n  var configKeys = [\n    'consumer_key',\n    'consumer_secret',\n    'access_token',\n    'access_token_secret'\n  ];\n\n  // update config\n  configKeys.forEach(function (k) {\n    if (auth[k]) {\n      self.config[k] = auth[k]\n    }\n  })\n  this._validateConfigOrThrow(self.config);\n}\n\nTwitter.prototype.getAuth = function () {\n  return this.config\n}\n\n//\n// Check that the required auth credentials are present in `config`.\n// @param {Object}  config  Object containing credentials for REST API auth\n//\nTwitter.prototype._validateConfigOrThrow = function (config) {\n  //check config for proper format\n  if (typeof config !== 'object') {\n    throw new TypeError('config must be object, got ' + typeof config)\n  }\n\n  if (typeof config.timeout_ms !== 'undefined' && isNaN(Number(config.timeout_ms))) {\n    throw new TypeError('Twit config `timeout_ms` must be a Number. Got: ' + config.timeout_ms + '.');\n  }\n\n  if (typeof config.strictSSL !== 'undefined' && typeof config.strictSSL !== 'boolean') {\n    throw new TypeError('Twit config `strictSSL` must be a Boolean. Got: ' + config.strictSSL + '.');\n  }\n\n  if (config.app_only_auth) {\n    var auth_type = 'app-only auth'\n    var required_keys = required_for_app_auth\n  } else {\n    var auth_type = 'user auth'\n    var required_keys = required_for_user_auth\n  }\n\n  required_keys.forEach(function (req_key) {\n    if (!config[req_key]) {\n      var err_msg = util.format('Twit config must include `%s` when using %s.', req_key, auth_type)\n      throw new Error(err_msg)\n    }\n  })\n}\n\nmodule.exports = Twitter\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}